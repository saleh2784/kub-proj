# 14. Create an nginx pod called nginx-resolver using image nginx,
# expose it internally with a service called nginx-resolver-service. 
#Test that you are able to look up the service and pod names from within the cluster. 
## asnwer : kubectl describe services nginx-resolver-service
apiVersion: v1
kind: Service
metadata:
  name: nginx-resolver-service
spec:
  selector:
    app: nginx-resolver
  ports:
  - port: 8080
    targetPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-resolver
spec:
  selector:
    matchLabels:
      app: nginx-resolver
  template:
    metadata:
      labels:
        app: nginx-resolver
    spec:
      containers:
      - name: nginx-resolver
        image: nginx
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 80

---
#Use the image: busybox:1.28 for dns lookup. 
#Record results in /root/nginx-yourname.svc and /root/nginx-yourname.pod
# 

apiVersion: v1
kind: Service
metadata:
  name: default-subdomain
spec:
  selector:
    name: busybox
  clusterIP: None
  ports:
  - name: foo # Actually, no port is needed.
    port: 1234
    targetPort: 1234
---
apiVersion: v1
kind: Pod
metadata:
  name: busybox
  labels:
    name: busybox
spec:
  hostname: busybox
  subdomain: default-subdomain
  containers:
  - image: busybox:1.28
    name: busybox
    resources:
          limits:
            memory: "256Mi"
            cpu: "1000m"
    command:
      - sleep
      - "3600"
# kubectl describe services nginx-resolver-service
# kubectl get pods -o wide --all-namespaces
# kubectl exec -it busybox -- nslookup kubernetes.default
# kubectl exec -it busybox --  cat /etc/resolv.conf
# kubectl get pods --namespace=kube-system -l k8s-app=kube-dns
# kubectl describe svc -n kube-system kube-dns
# kubectl get ep kube-dns --namespace=kube-system
# kubectl get svc --namespace=kube-system



